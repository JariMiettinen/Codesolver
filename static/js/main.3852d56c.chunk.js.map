{"version":3,"sources":["App.js","index.js"],"names":["colors","chosen","slots0","Array","fill","matches0","buttons","id","name","balls","idx","randomCode","rcode","i","Math","floor","random","code0","App","useState","slots","setSlots","row","setRow","matches","setMatches","code","setCode","Ball","className","onClick","clickHandler1","style","backgroundColor","Slot","newSlots","clickHandler2","Match","Buttons","buttonHandler","guessMatch","guess","fullMatch","anyMatch","code1","j","length","a","pop","matchCheck","slice","newMatches","alert","newCode","map","slot","index","button","ball","match","ReactDom","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3852d56c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nlet colors = ['red', 'green', 'blue', 'yellow', 'darkorange', 'purple', 'black', 'darkgrey', 'white', 'lightgrey'];\r\nlet chosen = 6;\r\nlet row0 = 7;\r\n\r\nconst slots0 = new Array((row0+1)*4).fill(6);\r\n\r\nconst matches0 = new Array((row0+1)*4).fill(9);\r\n\r\nconst buttons = [\r\n    {id: 1, name: 'New Game'},\r\n    {id: 2, name: 'Check'},\r\n];\r\n\r\nconst balls = [\r\n  {idx: 5}, {idx: 4}, {idx: 3}, {idx: 2}, {idx: 1}, {idx: 0},\r\n];\r\n\r\nconst randomCode = () => {\r\n    let rcode = [0, 0, 0, 0];\r\n    for (let i=0; i < 4; i++) {\r\n        rcode[i] = Math.floor(Math.random()*6);\r\n    }\r\n    return rcode;\r\n}\r\n\r\nlet code0 = randomCode();\r\n\r\nconst matchCheck = (guess, code) => {\r\n    let fullMatch = 0;\r\n    for (let i=0; i < 4; i++) {\r\n        if (guess[i] === code[i]) {\r\n            fullMatch++;\r\n        }\r\n    } \r\n    let anyMatch = 0;\r\n    let code1 = [...code];\r\n    for (let i=0; i < 4; i++) {\r\n        for (let j=code1.length; j >= 0; j--) {\r\n            if (guess[i] === code1[j]) {\r\n                anyMatch++;\r\n                var a = code1[code1.length-1];\r\n                code1[code1.length-1] = code1[j];\r\n                code1[j] = a;\r\n                code1.pop();\r\n                break; \r\n            }\r\n        } \r\n    }\r\n    if (fullMatch === 4) {\r\n        return [0, 0, 0, 0];\r\n    } else if (fullMatch === 3) {\r\n        if (anyMatch === 4) {\r\n            return [0, 0, 0, 3];\r\n        } else {\r\n            return [0, 0, 0, 7];\r\n        }\r\n    } else if (fullMatch === 2) {\r\n        if (anyMatch === 4) {\r\n            return [0, 0, 3, 3];\r\n        } else if (anyMatch === 3) {\r\n            return [0, 0, 3, 7];\r\n        } else {\r\n            return [0, 0, 7, 7];\r\n        }\r\n    } else if (fullMatch === 1) {\r\n        if (anyMatch === 4) {\r\n            return [0, 3, 3, 3];\r\n        } else if (anyMatch === 3) {\r\n            return [0, 3, 3, 7];\r\n        } else if (anyMatch === 2) {\r\n            return [0, 3, 7, 7];\r\n        } else {\r\n            return [0, 7, 7, 7];\r\n        }\r\n    } else if (fullMatch === 0) {\r\n        if (anyMatch === 4) {\r\n            return [3, 3, 3, 3];\r\n        } else if (anyMatch === 3) {\r\n            return [3, 3, 3, 7];\r\n        } else if (anyMatch === 2) {\r\n            return [3, 3, 7, 7];\r\n        } else if (anyMatch === 1) {\r\n            return [3, 7, 7, 7];\r\n        } else {\r\n            return [7, 7, 7, 7];\r\n        }\r\n    }\r\n    return [7, 7, 7, 7];\r\n}\r\n\r\nfunction App(){\r\n    const [slots, setSlots] = useState(slots0);\r\n    const [row, setRow] = useState(row0);\r\n    const [matches, setMatches] = useState(matches0);\r\n    const [code, setCode] = useState(code0);\r\n\r\n    const Ball = ({idx}) => {\r\n        const clickHandler1 = (idx) => {\r\n            chosen = idx;\r\n        } \r\n        return (\r\n            <span className=\"dot\" onClick={() => clickHandler1(idx)} style={{backgroundColor: colors[idx]}}>\r\n            </span>\r\n        );\r\n    };\r\n\r\n    const Slot = ({idx}) => {\r\n        const clickHandler2 = (idx) => {\r\n            if (Math.floor(idx/4) === row) {\r\n                let newSlots = [...slots];\r\n                newSlots[idx] = chosen;\r\n                setSlots(newSlots);\r\n            }\r\n        } \r\n        return (\r\n            <span className=\"dot\" onClick={() => clickHandler2(idx)} style={{backgroundColor: colors[slots[idx]]}}>\r\n            </span>\r\n        );\r\n    };\r\n\r\n    const Match = ({idx}) => {\r\n        return (\r\n            <span className=\"smalldot\" style={{backgroundColor: colors[matches[idx]]}}>\r\n            </span>\r\n        );\r\n    };\r\n\r\n    const Buttons = ({name}) => {\r\n        const buttonHandler = (name) => {\r\n            if (name === 'Check' && row >= 0) {\r\n                if (slots[row*4]<6 && slots[row*4+1]<6 && slots[row*4+2]<6 && slots[row*4+3]<6) {\r\n                    let guessMatch = matchCheck(slots.slice(row*4, (row+1)*4), code);\r\n                    let newMatches = [...matches];\r\n                    newMatches[row*4] = guessMatch[0];\r\n                    newMatches[row*4+1] = guessMatch[1];\r\n                    newMatches[row*4+2] = guessMatch[2];\r\n                    newMatches[row*4+3] = guessMatch[3];\r\n                    setMatches(newMatches);    \r\n                    if (guessMatch[0] === 0 && guessMatch[1] === 0 && guessMatch[2] === 0 && guessMatch[3] === 0) {\r\n                        alert('You won!')\r\n                        setRow(-1);\r\n                    } else {\r\n                        if (row === 0) {\r\n                            setRow(row-1);\r\n                            alert('Game over!')\r\n                        } else {\r\n                            setRow(row-1);\r\n                        }\r\n                    }\r\n                } else {\r\n                    alert('Fill all slots.')\r\n                }\r\n            } else if (name !== 'Check') {\r\n                setSlots(slots0);\r\n                setRow(row0);\r\n                let newCode = randomCode();\r\n                setCode(newCode);\r\n                setMatches(matches0);\r\n            }\r\n        }\r\n        return (\r\n            <button className=\"button\" onClick={() => buttonHandler(name)}>{name}</button>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <section className=\"board\">\r\n            <div className=\"slottery\">\r\n                {slots.map((slot, index) => {\r\n                    return <Slot key={index} idx={index}></Slot>\r\n                })}\r\n            </div>\r\n            <div className=\"menu\">\r\n                {buttons.map((button) => {\r\n                    return <Buttons key={button.id} name={button.name}></Buttons>\r\n                })}\r\n            </div>\r\n            <div className=\"colorPalette\">\r\n                {balls.map((ball) => {\r\n                    return <Ball key={ball.idx} idx={ball.idx}></Ball>\r\n                })}\r\n            </div>\r\n            <div className=\"match\">\r\n                {matches.map((match, index) => {\r\n                    return <Match key={index} idx={index}></Match>\r\n                })}\r\n            </div>\r\n            <div className=\"header\">\r\n                <h1>Codesolver</h1>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\n\r\nexport default App;","import { waitForElementToBeRemoved } from \"@testing-library/react\";\nimport React from \"react\";\nimport ReactDom from \"react-dom\";\n\nimport './index.css';\nimport App from './App';\n\n\n\nReactDom.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>, \n  document.getElementById('root'));\n\n/* import {books} from \"./books\";\nimport {Book} from \"./Book\";\n\nfunction Booklist(){\n  return (\n    <section className=\"booklist\">\n    {books.map((book) => {\n      return <Book key={book.id} book={book}></Book>;\n//      <Book key={book.id} img={book.img} title={book.title} author={book.author}></Book>\n    })}\n  </section>\n  );\n};\n */"],"sourceRoot":""}