{"version":3,"sources":["App.js","index.js"],"names":["colors","rounds","round5idx","last5","Array","fill","slots0","matches0","buttons","id","name","balls","idx","sumFunction","x","res","i","length","randomCode","rcode","Math","floor","random","code0","App","document","title","useState","chosen","setChosen","slots","setSlots","row","setRow","matches","setMatches","code","setCode","sumLast5","setSumLast5","Ball","clickHandler1","className","onClick","style","backgroundColor","Slot","newSlots","clickHandler2","Match","Score","Buttons","buttonHandler","guessMatch","guess","fullMatch","anyMatch","code1","j","a","pop","arr1","arr2","arr3","concat","matchCheck","slice","newMatches","alert","sum5","newCode","map","slot","index","button","ball","match","ReactDom","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.64c73749.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nlet colors = ['red', 'green', 'blue', 'yellow', 'darkorange', 'purple', 'black', 'darkgrey', 'white', 'lightgrey'];\r\nlet chosen0 = 6;\r\nlet row0 = 7;\r\nlet rounds = 0;\r\nlet round5idx = 0;\r\n\r\nconst last5 = new Array(5).fill(10);\r\n\r\nconst slots0 = new Array((row0+1)*4).fill(6);\r\n\r\nconst matches0 = new Array((row0+1)*4).fill(9);\r\n\r\nconst buttons = [\r\n    {id: 1, name: 'New Game'},\r\n    {id: 2, name: 'Check'},\r\n];\r\n\r\nconst balls = [\r\n  {idx: 5}, {idx: 4}, {idx: 3}, {idx: 2}, {idx: 1}, {idx: 0},\r\n];\r\n\r\nconst sumFunction = (x) => {\r\n    let res = 0;\r\n    for (let i=0; i < x.length; i++) {\r\n        res = res+x[i];\r\n    }\r\n    return res;\r\n}\r\n\r\n\r\nconst randomCode = () => {\r\n    let rcode = [0, 0, 0, 0];\r\n    for (let i=0; i < 4; i++) {\r\n        rcode[i] = Math.floor(Math.random()*6);\r\n    }\r\n    return rcode;\r\n}\r\n\r\nlet code0 = randomCode();\r\n\r\nconst matchCheck = (guess, code) => {\r\n    let fullMatch = 0;\r\n    for (let i=0; i < 4; i++) {\r\n        if (guess[i] === code[i]) {\r\n            fullMatch++;\r\n        }\r\n    } \r\n    let anyMatch = 0;\r\n    let code1 = [...code];\r\n    for (let i=0; i < 4; i++) {\r\n        for (let j=code1.length; j >= 0; j--) {\r\n            if (guess[i] === code1[j]) {\r\n                anyMatch++;\r\n                var a = code1[code1.length-1];\r\n                code1[code1.length-1] = code1[j];\r\n                code1[j] = a;\r\n                code1.pop();\r\n                break; \r\n            }\r\n        } \r\n    }\r\n\r\n    const arr1 = new Array(fullMatch).fill(0);\r\n    const arr2 = new Array(anyMatch-fullMatch).fill(3);\r\n    const arr3 = new Array(4-anyMatch).fill(7);\r\n\r\n    return arr1.concat(arr2, arr3);    \r\n}\r\n\r\nfunction App(){\r\n    document.title = \"Codesolver\";\r\n    const [chosen, setChosen] = useState(chosen0);\r\n    const [slots, setSlots] = useState(slots0);\r\n    const [row, setRow] = useState(row0);\r\n    const [matches, setMatches] = useState(matches0);\r\n    const [code, setCode] = useState(code0);\r\n    const [sumLast5, setSumLast5] = useState(50);\r\n\r\n    const Ball = ({idx}) => {\r\n        const clickHandler1 = (idx) => {\r\n            setChosen(idx);\r\n        } \r\n        if (chosen === idx) {\r\n            return (\r\n            <span className=\"bdot\" onClick={() => clickHandler1(idx)} style={{backgroundColor: colors[idx]}}>\r\n            </span>\r\n        );\r\n        }    \r\n        return (\r\n            <span className=\"dot\" onClick={() => clickHandler1(idx)} style={{backgroundColor: colors[idx]}}>\r\n            </span>\r\n        );\r\n    };\r\n\r\n    const Slot = ({idx}) => {\r\n        const clickHandler2 = (idx) => {\r\n            if (Math.floor(idx/4) === row) {\r\n                let newSlots = [...slots];\r\n                newSlots[idx] = chosen;\r\n                setSlots(newSlots);\r\n            }\r\n        } \r\n        return (\r\n            <span className=\"dot\" onClick={() => clickHandler2(idx)} style={{backgroundColor: colors[slots[idx]]}}>\r\n            </span>\r\n        );\r\n    };\r\n\r\n    const Match = ({idx}) => {\r\n        return (\r\n            <span className=\"smalldot\" style={{backgroundColor: colors[matches[idx]]}}>\r\n            </span>\r\n        );\r\n    };\r\n    \r\n    const Score = () => {\r\n        if (rounds >= 5) {\r\n            return (\r\n                <h4> Sum of Last 5 Attempts: {sumLast5}</h4>\r\n            );\r\n        }\r\n        return (\r\n            <h4> Sum of Last 5 Attempts: -</h4>\r\n        );\r\n    };\r\n\r\n    const Buttons = ({name}) => {\r\n        const buttonHandler = (name) => {\r\n            if (name === 'Check' && row >= 0) {\r\n                if (slots[row*4]<6 && slots[row*4+1]<6 && slots[row*4+2]<6 && slots[row*4+3]<6) {\r\n                    let guessMatch = matchCheck(slots.slice(row*4, (row+1)*4), code);\r\n                    let newMatches = [...matches];\r\n                    newMatches[row*4] = guessMatch[0];\r\n                    newMatches[row*4+1] = guessMatch[1];\r\n                    newMatches[row*4+2] = guessMatch[2];\r\n                    newMatches[row*4+3] = guessMatch[3];\r\n                    setMatches(newMatches);    \r\n                    if (guessMatch[0]===0 && guessMatch[1]===0 && guessMatch[2]===0 && guessMatch[3]===0) {\r\n                        alert('You won!')\r\n                        rounds++;\r\n                        last5[round5idx] = 8-row;\r\n                        round5idx = round5idx === 4 ? 0 : round5idx+1;\r\n                        let sum5 = sumFunction(last5);\r\n                        setSumLast5(sum5);\r\n                        setRow(-1);\r\n                    } else {\r\n                        if (row === 0) {\r\n                            rounds++;\r\n                            last5[round5idx] = 10;\r\n                            round5idx = round5idx === 4 ? 0 : round5idx+1;\r\n                            let sum5 = sumFunction(last5);\r\n                            setSumLast5(sum5);\r\n                            setRow(-1);\r\n                            alert('Game over!')\r\n                        } else {\r\n                            setRow(row-1);\r\n                        }\r\n                    }\r\n                } else {\r\n                    alert('Fill all slots.')\r\n                }\r\n            } else if (name !== 'Check') {\r\n                if (row >= 0) {\r\n                    rounds++;\r\n                    last5[round5idx] = 10;\r\n                    round5idx = round5idx === 4 ? 0 : round5idx+1;\r\n                    let sum5 = sumFunction(last5);\r\n                    setSumLast5(sum5);\r\n                }\r\n                setSlots(slots0);\r\n                setRow(row0);\r\n                let newCode = randomCode();\r\n                setCode(newCode);\r\n                setMatches(matches0);\r\n            }\r\n        }\r\n        return (\r\n            <button className=\"button\" onClick={() => buttonHandler(name)}>{name}</button>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <section className=\"board\">\r\n            <div className=\"slottery\">\r\n                {slots.map((slot, index) => {\r\n                    return <Slot key={index} idx={index}></Slot>\r\n                })}\r\n            </div>\r\n            <div className=\"menu\">\r\n                {buttons.map((button) => {\r\n                    return <Buttons key={button.id} name={button.name}></Buttons>\r\n                })}\r\n            </div>\r\n            <div className=\"score\">\r\n                <Score />\r\n            </div>\r\n            <div className=\"colorPalette\">\r\n                {balls.map((ball) => {\r\n                    return <Ball key={ball.idx} idx={ball.idx}></Ball>\r\n                })}\r\n            </div>\r\n            <div className=\"match\">\r\n                {matches.map((match, index) => {\r\n                    return <Match key={index} idx={index}></Match>\r\n                })}\r\n            </div>\r\n            <div className=\"header\">\r\n                <h1>Codesolver</h1>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\n\r\nexport default App;","import React from \"react\";\nimport ReactDom from \"react-dom\";\n\nimport './index.css';\nimport App from './App';\n\n\n\nReactDom.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>, \n  document.getElementById('root'));\n\n/* import {books} from \"./books\";\nimport {Book} from \"./Book\";\n\nfunction Booklist(){\n  return (\n    <section className=\"booklist\">\n    {books.map((book) => {\n      return <Book key={book.id} book={book}></Book>;\n//      <Book key={book.id} img={book.img} title={book.title} author={book.author}></Book>\n    })}\n  </section>\n  );\n};\n */"],"sourceRoot":""}