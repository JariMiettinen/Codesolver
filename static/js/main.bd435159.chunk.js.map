{"version":3,"sources":["App.js","index.js"],"names":["colors","chosen","slots0","Array","fill","matches0","buttons","id","name","balls","idx","randomCode","rcode","i","Math","floor","random","code0","App","document","title","useState","slots","setSlots","row","setRow","matches","setMatches","code","setCode","Ball","className","onClick","clickHandler1","style","backgroundColor","Slot","newSlots","clickHandler2","Match","Buttons","buttonHandler","guessMatch","guess","fullMatch","anyMatch","code1","j","length","a","pop","arr1","arr2","arr3","concat","matchCheck","slice","newMatches","alert","newCode","map","slot","index","button","ball","match","ReactDom","render","StrictMode","getElementById"],"mappings":"sMAEIA,EAAS,CAAC,MAAO,QAAS,OAAQ,SAAU,aAAc,SAAU,QAAS,WAAY,QAAS,aAClGC,EAAS,EAGPC,EAAS,IAAIC,MAAM,IAAYC,KAAK,GAEpCC,EAAW,IAAIF,MAAM,IAAYC,KAAK,GAEtCE,EAAU,CACZ,CAACC,GAAI,EAAGC,KAAM,YACd,CAACD,GAAI,EAAGC,KAAM,UAGZC,EAAQ,CACZ,CAACC,IAAK,GAAI,CAACA,IAAK,GAAI,CAACA,IAAK,GAAI,CAACA,IAAK,GAAI,CAACA,IAAK,GAAI,CAACA,IAAK,IAGpDC,EAAa,WAEf,IADA,IAAIC,EAAQ,CAAC,EAAG,EAAG,EAAG,GACbC,EAAE,EAAGA,EAAI,EAAGA,IACjBD,EAAMC,GAAKC,KAAKC,MAAoB,EAAdD,KAAKE,UAE/B,OAAOJ,GAGPK,EAAQN,IAyIGO,MA1Gf,WACIC,SAASC,MAAQ,cACjB,MAA0BC,mBAASnB,GAAnC,mBAAOoB,EAAP,KAAcC,EAAd,KACA,EAAsBF,mBAzDf,GAyDP,mBAAOG,EAAP,KAAYC,EAAZ,KACA,EAA8BJ,mBAAShB,GAAvC,mBAAOqB,EAAP,KAAgBC,EAAhB,KACA,EAAwBN,mBAASJ,GAAjC,mBAAOW,EAAP,KAAaC,EAAb,KAEMC,EAAO,SAAC,GAAW,IAAVpB,EAAS,EAATA,IAIX,OACI,sBAAMqB,UAAU,MAAMC,QAAS,kBAJb,SAACtB,GACnBT,EAASS,EAG4BuB,CAAcvB,IAAMwB,MAAO,CAACC,gBAAiBnC,EAAOU,OAK3F0B,EAAO,SAAC,GAAW,IAAV1B,EAAS,EAATA,IAQX,OACI,sBAAMqB,UAAU,MAAMC,QAAS,kBARb,SAACtB,GACnB,GAAII,KAAKC,MAAML,EAAI,KAAOc,EAAK,CAC3B,IAAIa,EAAQ,YAAOf,GACnBe,EAAS3B,GAAOT,EAChBsB,EAASc,IAIwBC,CAAc5B,IAAMwB,MAAO,CAACC,gBAAiBnC,EAAOsB,EAAMZ,QAKjG6B,EAAQ,SAAC,GAAW,IAAV7B,EAAS,EAATA,IACZ,OACI,sBAAMqB,UAAU,WAAWG,MAAO,CAACC,gBAAiBnC,EAAO0B,EAAQhB,QAKrE8B,EAAU,SAAC,GAAY,IAAXhC,EAAU,EAAVA,KACRiC,EAAgB,SAACjC,GACnB,GAAa,UAATA,GAAoBgB,GAAO,EAC3B,GAAIF,EAAU,EAAJE,GAAO,GAAKF,EAAU,EAAJE,EAAM,GAAG,GAAKF,EAAU,EAAJE,EAAM,GAAG,GAAKF,EAAU,EAAJE,EAAM,GAAG,EAAG,CAC5E,IAAIkB,EAvEL,SAACC,EAAOf,GAEvB,IADA,IAAIgB,EAAY,EACP/B,EAAE,EAAGA,EAAI,EAAGA,IACb8B,EAAM9B,KAAOe,EAAKf,IAClB+B,IAKR,IAFA,IAAIC,EAAW,EACXC,EAAK,YAAOlB,GACPf,EAAE,EAAGA,EAAI,EAAGA,IACjB,IAAK,IAAIkC,EAAED,EAAME,OAAQD,GAAK,EAAGA,IAC7B,GAAIJ,EAAM9B,KAAOiC,EAAMC,GAAI,CACvBF,IACA,IAAII,EAAIH,EAAMA,EAAME,OAAO,GAC3BF,EAAMA,EAAME,OAAO,GAAKF,EAAMC,GAC9BD,EAAMC,GAAKE,EACXH,EAAMI,MACN,MAKZ,IAAMC,EAAO,IAAIhD,MAAMyC,GAAWxC,KAAK,GACjCgD,EAAO,IAAIjD,MAAM0C,EAASD,GAAWxC,KAAK,GAC1CiD,EAAO,IAAIlD,MAAM,EAAE0C,GAAUzC,KAAK,GAExC,OAAO+C,EAAKG,OAAOF,EAAMC,GA6CQE,CAAWjC,EAAMkC,MAAU,EAAJhC,EAAe,GAAPA,EAAI,IAAOI,GACvD6B,EAAU,YAAO/B,GACrB+B,EAAe,EAAJjC,GAASkB,EAAW,GAC/Be,EAAe,EAAJjC,EAAM,GAAKkB,EAAW,GACjCe,EAAe,EAAJjC,EAAM,GAAKkB,EAAW,GACjCe,EAAe,EAAJjC,EAAM,GAAKkB,EAAW,GACjCf,EAAW8B,GACW,IAAlBf,EAAW,IAA8B,IAAlBA,EAAW,IAA8B,IAAlBA,EAAW,IAA8B,IAAlBA,EAAW,IAChFgB,MAAM,YACNjC,GAAQ,IAEI,IAARD,GACAC,EAAOD,EAAI,GACXkC,MAAM,eAENjC,EAAOD,EAAI,QAInBkC,MAAM,wBAEP,GAAa,UAATlD,EAAkB,CACzBe,EAASrB,GACTuB,EAvHL,GAwHK,IAAIkC,EAAUhD,IACdkB,EAAQ8B,GACRhC,EAAWtB,KAGnB,OACI,wBAAQ0B,UAAU,SAASC,QAAS,kBAAMS,EAAcjC,IAAxD,SAAgEA,KAIxE,OACI,0BAASuB,UAAU,QAAnB,UACI,qBAAKA,UAAU,WAAf,SACKT,EAAMsC,KAAI,SAACC,EAAMC,GACd,OAAO,cAAC1B,EAAD,CAAkB1B,IAAKoD,GAAZA,QAG1B,qBAAK/B,UAAU,OAAf,SACKzB,EAAQsD,KAAI,SAACG,GACV,OAAO,cAACvB,EAAD,CAAyBhC,KAAMuD,EAAOvD,MAAxBuD,EAAOxD,SAGpC,qBAAKwB,UAAU,eAAf,SACKtB,EAAMmD,KAAI,SAACI,GACR,OAAO,cAAClC,EAAD,CAAqBpB,IAAKsD,EAAKtD,KAApBsD,EAAKtD,UAG/B,qBAAKqB,UAAU,QAAf,SACKL,EAAQkC,KAAI,SAACK,EAAOH,GACjB,OAAO,cAACvB,EAAD,CAAmB7B,IAAKoD,GAAZA,QAG3B,qBAAK/B,UAAU,SAAf,SACI,kDCrJhBmC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjD,SAASkD,eAAe,W","file":"static/js/main.bd435159.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nlet colors = ['red', 'green', 'blue', 'yellow', 'darkorange', 'purple', 'black', 'darkgrey', 'white', 'lightgrey'];\r\nlet chosen = 6;\r\nlet row0 = 7;\r\n\r\nconst slots0 = new Array((row0+1)*4).fill(6);\r\n\r\nconst matches0 = new Array((row0+1)*4).fill(9);\r\n\r\nconst buttons = [\r\n    {id: 1, name: 'New Game'},\r\n    {id: 2, name: 'Check'},\r\n];\r\n\r\nconst balls = [\r\n  {idx: 5}, {idx: 4}, {idx: 3}, {idx: 2}, {idx: 1}, {idx: 0},\r\n];\r\n\r\nconst randomCode = () => {\r\n    let rcode = [0, 0, 0, 0];\r\n    for (let i=0; i < 4; i++) {\r\n        rcode[i] = Math.floor(Math.random()*6);\r\n    }\r\n    return rcode;\r\n}\r\n\r\nlet code0 = randomCode();\r\n\r\nconst matchCheck = (guess, code) => {\r\n    let fullMatch = 0;\r\n    for (let i=0; i < 4; i++) {\r\n        if (guess[i] === code[i]) {\r\n            fullMatch++;\r\n        }\r\n    } \r\n    let anyMatch = 0;\r\n    let code1 = [...code];\r\n    for (let i=0; i < 4; i++) {\r\n        for (let j=code1.length; j >= 0; j--) {\r\n            if (guess[i] === code1[j]) {\r\n                anyMatch++;\r\n                var a = code1[code1.length-1];\r\n                code1[code1.length-1] = code1[j];\r\n                code1[j] = a;\r\n                code1.pop();\r\n                break; \r\n            }\r\n        } \r\n    }\r\n\r\n    const arr1 = new Array(fullMatch).fill(0);\r\n    const arr2 = new Array(anyMatch-fullMatch).fill(3);\r\n    const arr3 = new Array(4-anyMatch).fill(7);\r\n\r\n    return arr1.concat(arr2, arr3);    \r\n}\r\n\r\nfunction App(){\r\n    document.title = \"Codesolver1\";\r\n    const [slots, setSlots] = useState(slots0);\r\n    const [row, setRow] = useState(row0);\r\n    const [matches, setMatches] = useState(matches0);\r\n    const [code, setCode] = useState(code0);\r\n\r\n    const Ball = ({idx}) => {\r\n        const clickHandler1 = (idx) => {\r\n            chosen = idx;\r\n        } \r\n        return (\r\n            <span className=\"dot\" onClick={() => clickHandler1(idx)} style={{backgroundColor: colors[idx]}}>\r\n            </span>\r\n        );\r\n    };\r\n\r\n    const Slot = ({idx}) => {\r\n        const clickHandler2 = (idx) => {\r\n            if (Math.floor(idx/4) === row) {\r\n                let newSlots = [...slots];\r\n                newSlots[idx] = chosen;\r\n                setSlots(newSlots);\r\n            }\r\n        } \r\n        return (\r\n            <span className=\"dot\" onClick={() => clickHandler2(idx)} style={{backgroundColor: colors[slots[idx]]}}>\r\n            </span>\r\n        );\r\n    };\r\n\r\n    const Match = ({idx}) => {\r\n        return (\r\n            <span className=\"smalldot\" style={{backgroundColor: colors[matches[idx]]}}>\r\n            </span>\r\n        );\r\n    };\r\n\r\n    const Buttons = ({name}) => {\r\n        const buttonHandler = (name) => {\r\n            if (name === 'Check' && row >= 0) {\r\n                if (slots[row*4]<6 && slots[row*4+1]<6 && slots[row*4+2]<6 && slots[row*4+3]<6) {\r\n                    let guessMatch = matchCheck(slots.slice(row*4, (row+1)*4), code);\r\n                    let newMatches = [...matches];\r\n                    newMatches[row*4] = guessMatch[0];\r\n                    newMatches[row*4+1] = guessMatch[1];\r\n                    newMatches[row*4+2] = guessMatch[2];\r\n                    newMatches[row*4+3] = guessMatch[3];\r\n                    setMatches(newMatches);    \r\n                    if (guessMatch[0] === 0 && guessMatch[1] === 0 && guessMatch[2] === 0 && guessMatch[3] === 0) {\r\n                        alert('You won!')\r\n                        setRow(-1);\r\n                    } else {\r\n                        if (row === 0) {\r\n                            setRow(row-1);\r\n                            alert('Game over!')\r\n                        } else {\r\n                            setRow(row-1);\r\n                        }\r\n                    }\r\n                } else {\r\n                    alert('Fill all slots.')\r\n                }\r\n            } else if (name !== 'Check') {\r\n                setSlots(slots0);\r\n                setRow(row0);\r\n                let newCode = randomCode();\r\n                setCode(newCode);\r\n                setMatches(matches0);\r\n            }\r\n        }\r\n        return (\r\n            <button className=\"button\" onClick={() => buttonHandler(name)}>{name}</button>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <section className=\"board\">\r\n            <div className=\"slottery\">\r\n                {slots.map((slot, index) => {\r\n                    return <Slot key={index} idx={index}></Slot>\r\n                })}\r\n            </div>\r\n            <div className=\"menu\">\r\n                {buttons.map((button) => {\r\n                    return <Buttons key={button.id} name={button.name}></Buttons>\r\n                })}\r\n            </div>\r\n            <div className=\"colorPalette\">\r\n                {balls.map((ball) => {\r\n                    return <Ball key={ball.idx} idx={ball.idx}></Ball>\r\n                })}\r\n            </div>\r\n            <div className=\"match\">\r\n                {matches.map((match, index) => {\r\n                    return <Match key={index} idx={index}></Match>\r\n                })}\r\n            </div>\r\n            <div className=\"header\">\r\n                <h1>Codesolver</h1>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\n\r\nexport default App;","import React from \"react\";\nimport ReactDom from \"react-dom\";\n\nimport './index.css';\nimport App from './App';\n\n\n\nReactDom.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>, \n  document.getElementById('root'));\n\n/* import {books} from \"./books\";\nimport {Book} from \"./Book\";\n\nfunction Booklist(){\n  return (\n    <section className=\"booklist\">\n    {books.map((book) => {\n      return <Book key={book.id} book={book}></Book>;\n//      <Book key={book.id} img={book.img} title={book.title} author={book.author}></Book>\n    })}\n  </section>\n  );\n};\n */"],"sourceRoot":""}